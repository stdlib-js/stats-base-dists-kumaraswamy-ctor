{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar kurtosis = require( '@stdlib/stats-base-dists-kumaraswamy-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-kumaraswamy-mean' );\nvar mode = require( '@stdlib/stats-base-dists-kumaraswamy-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-kumaraswamy-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-kumaraswamy-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-kumaraswamy-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-kumaraswamy-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-kumaraswamy-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-kumaraswamy-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-kumaraswamy-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-kumaraswamy-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction kumaraswamyCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction kumaraswamyLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction kumaraswamyLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction kumaraswamyPDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction kumaraswamyQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Kumaraswamy's double bounded distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [a=1.0] - first shape parameter\n* @param {PositiveNumber} [b=1.0] - second shape parameter\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @returns {Kumaraswamy} distribution instance\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );\n*\n* var y = kumaraswamy.cdf( 0.8 );\n* // returns 0.8\n*\n* var v = kumaraswamy.mode;\n* // returns NaN\n*/\nfunction Kumaraswamy() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Kumaraswamy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Kumaraswamy();\n\t\t}\n\t\treturn new Kumaraswamy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isPositive( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isPositive( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', b ) );\n\t\t}\n\t} else {\n\t\ta = 1.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Kumaraswamy's double bounded distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.kurtosis;\n* // returns ~2.704\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution expected value.\n*\n* @name mean\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mean;\n* // returns ~0.481\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution mode.\n*\n* @name mode\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mode;\n* // returns ~0.503\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution skewness.\n*\n* @name skewness\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.skewness;\n* // returns ~-0.201\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution standard deviation.\n*\n* @name stdev\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.stdev;\n* // returns ~0.13\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution variance.\n*\n* @name variance\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.variance;\n* // returns ~0.017\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.cdf( 0.5 );\n* // returns ~0.684\n*/\nsetReadOnly( Kumaraswamy.prototype, 'cdf', kumaraswamyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logcdf( 0.5 );\n* // returns ~-0.38\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logcdf', kumaraswamyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logpdf( 0.9 );\n* // returns ~-3.008\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logpdf', kumaraswamyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.pdf( 0.9 );\n* // returns ~0.049\n*/\nsetReadOnly( Kumaraswamy.prototype, 'pdf', kumaraswamyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.quantile( 0.5 );\n* // returns ~0.399\n*/\nsetReadOnly( Kumaraswamy.prototype, 'quantile', kumaraswamyQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Kumaraswamy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Kumaraswamy's double bounded distribution constructor.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-ctor\n*\n* @example\n* var Kumaraswamy = require( '@stdlib/stats-base-dists-kumaraswamy-ctor' );\n*\n* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );\n*\n* var y = kumaraswamy.cdf( 0.8 );\n* // returns 0.8\n*\n* var mode = kumaraswamy.mode;\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "kurtosis", "mean", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "pdf", "quantile", "format", "kumaraswamyCDF", "x", "kumaraswamyLogCDF", "kumaraswamyLogPDF", "kumaraswamyPDF", "kumaraswamyQuantile", "p", "Kumaraswamy", "a", "b", "value", "main"]
}
