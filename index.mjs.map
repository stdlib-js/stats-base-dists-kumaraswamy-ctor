{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport defineProperty from '@stdlib/utils-define-property' ;\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ;\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number' ;\nimport kurtosis from '@stdlib/stats-base-dists-kumaraswamy-kurtosis' ;\nimport mean from '@stdlib/stats-base-dists-kumaraswamy-mean' ;\nimport mode from '@stdlib/stats-base-dists-kumaraswamy-mode' ;\nimport skewness from '@stdlib/stats-base-dists-kumaraswamy-skewness' ;\nimport stdev from '@stdlib/stats-base-dists-kumaraswamy-stdev' ;\nimport variance from '@stdlib/stats-base-dists-kumaraswamy-variance' ;\nimport cdf from '@stdlib/stats-base-dists-kumaraswamy-cdf' ;\nimport logcdf from '@stdlib/stats-base-dists-kumaraswamy-logcdf' ;\nimport logpdf from '@stdlib/stats-base-dists-kumaraswamy-logpdf' ;\nimport pdf from '@stdlib/stats-base-dists-kumaraswamy-pdf' ;\nimport quantile from '@stdlib/stats-base-dists-kumaraswamy-quantile' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction kumaraswamyCDF( x ) {\n\treturn cdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction kumaraswamyLogCDF( x ) {\n\treturn logcdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction kumaraswamyLogPDF( x ) {\n\treturn logpdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction kumaraswamyPDF( x ) {\n\treturn pdf( x, this.a, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction kumaraswamyQuantile( p ) {\n\treturn quantile( p, this.a, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Kumaraswamy's double bounded distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [a=1.0] - first shape parameter\n* @param {PositiveNumber} [b=1.0] - second shape parameter\n* @throws {TypeError} `a` must be a positive number\n* @throws {TypeError} `b` must be a positive number\n* @returns {Kumaraswamy} distribution instance\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );\n*\n* var y = kumaraswamy.cdf( 0.8 );\n* // returns 0.8\n*\n* var v = kumaraswamy.mode;\n* // returns NaN\n*/\nfunction Kumaraswamy() {\n\tvar a;\n\tvar b;\n\tif ( !(this instanceof Kumaraswamy) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Kumaraswamy();\n\t\t}\n\t\treturn new Kumaraswamy( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\ta = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isPositive( a ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', a ) );\n\t\t}\n\t\tif ( !isPositive( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', b ) );\n\t\t}\n\t} else {\n\t\ta = 1.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'a', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn a;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\ta = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Kumaraswamy's double bounded distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.kurtosis;\n* // returns ~2.704\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution expected value.\n*\n* @name mean\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mean;\n* // returns ~0.481\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mean', function get() {\n\treturn mean( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution mode.\n*\n* @name mode\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.mode;\n* // returns ~0.503\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'mode', function get() {\n\treturn mode( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution skewness.\n*\n* @name skewness\n* @memberof Kumaraswamy.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.skewness;\n* // returns ~-0.201\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'skewness', function get() {\n\treturn skewness( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution standard deviation.\n*\n* @name stdev\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.stdev;\n* // returns ~0.13\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'stdev', function get() {\n\treturn stdev( this.a, this.b );\n});\n\n/**\n* Kumaraswamy's double bounded distribution variance.\n*\n* @name variance\n* @memberof Kumaraswamy.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );\n*\n* var v = kumaraswamy.variance;\n* // returns ~0.017\n*/\nsetReadOnlyAccessor( Kumaraswamy.prototype, 'variance', function get() {\n\treturn variance( this.a, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.cdf( 0.5 );\n* // returns ~0.684\n*/\nsetReadOnly( Kumaraswamy.prototype, 'cdf', kumaraswamyCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logcdf( 0.5 );\n* // returns ~-0.38\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logcdf', kumaraswamyLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.logpdf( 0.9 );\n* // returns ~-3.008\n*/\nsetReadOnly( Kumaraswamy.prototype, 'logpdf', kumaraswamyLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.pdf( 0.9 );\n* // returns ~0.049\n*/\nsetReadOnly( Kumaraswamy.prototype, 'pdf', kumaraswamyPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Kumaraswamy.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );\n*\n* var v = kumaraswamy.quantile( 0.5 );\n* // returns ~0.399\n*/\nsetReadOnly( Kumaraswamy.prototype, 'quantile', kumaraswamyQuantile );\n\n\n// EXPORTS //\n\nexport default Kumaraswamy;\n"],"names":["Kumaraswamy","a","b","this","arguments","length","isPositive","TypeError","format","defineProperty","configurable","enumerable","get","set","value","setReadOnlyAccessor","prototype","kurtosis","mean","mode","skewness","stdev","variance","setReadOnly","x","cdf","logcdf","logpdf","pdf","p","quantile"],"mappings":";;knDAyHA,SAASA,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAaI,UAAW,GAAKA,UAAW,IAEpD,GAAKA,UAAUC,OAAS,CAGvB,GADAH,EAAIE,UAAW,IACTE,EAFNL,EAAIG,UAAW,IAGd,MAAM,IAAIG,UAAWC,EAAQ,kFAAmFP,IAEjH,IAAMK,EAAYJ,GACjB,MAAM,IAAIK,UAAWC,EAAQ,mFAAoFN,SAGlHD,EAAI,EACJC,EAAI,EA4BL,OA1BAO,EAAgBN,KAAM,IAAK,CAC1BO,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOX,GAERY,IAAO,SAAcC,GACpB,IAAMR,EAAYQ,GACjB,MAAM,IAAIP,UAAWC,EAAQ,8DAA+DM,IAE7Fb,EAAIa,KAGNL,EAAgBN,KAAM,IAAK,CAC1BO,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOV,GAERW,IAAO,SAAcC,GACpB,IAAMR,EAAYQ,GACjB,MAAM,IAAIP,UAAWC,EAAQ,8DAA+DM,IAE7FZ,EAAIY,KAGCX,KAiBRY,EAAqBf,EAAYgB,UAAW,YAAY,WACvD,OAAOC,EAAUd,KAAKF,EAAGE,KAAKD,MAiB/Ba,EAAqBf,EAAYgB,UAAW,QAAQ,WACnD,OAAOE,EAAMf,KAAKF,EAAGE,KAAKD,MAiB3Ba,EAAqBf,EAAYgB,UAAW,QAAQ,WACnD,OAAOG,EAAMhB,KAAKF,EAAGE,KAAKD,MAiB3Ba,EAAqBf,EAAYgB,UAAW,YAAY,WACvD,OAAOI,EAAUjB,KAAKF,EAAGE,KAAKD,MAiB/Ba,EAAqBf,EAAYgB,UAAW,SAAS,WACpD,OAAOK,EAAOlB,KAAKF,EAAGE,KAAKD,MAiB5Ba,EAAqBf,EAAYgB,UAAW,YAAY,WACvD,OAAOM,EAAUnB,KAAKF,EAAGE,KAAKD,MAmB/BqB,EAAavB,EAAYgB,UAAW,OArPpC,SAAyBQ,GACxB,OAAOC,EAAKD,EAAGrB,KAAKF,EAAGE,KAAKD,MAsQ7BqB,EAAavB,EAAYgB,UAAW,UA5PpC,SAA4BQ,GAC3B,OAAOE,EAAQF,EAAGrB,KAAKF,EAAGE,KAAKD,MA6QhCqB,EAAavB,EAAYgB,UAAW,UAnQpC,SAA4BQ,GAC3B,OAAOG,EAAQH,EAAGrB,KAAKF,EAAGE,KAAKD,MAoRhCqB,EAAavB,EAAYgB,UAAW,OA1QpC,SAAyBQ,GACxB,OAAOI,EAAKJ,EAAGrB,KAAKF,EAAGE,KAAKD,MA2R7BqB,EAAavB,EAAYgB,UAAW,YAjRpC,SAA8Ba,GAC7B,OAAOC,EAAUD,EAAG1B,KAAKF,EAAGE,KAAKD"}